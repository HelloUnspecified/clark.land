---
export interface Testimonial {
  name: string;
  company: string;
  role: string;
  quote: string;
  image?: string;
}

export interface Props {
  testimonials: Testimonial[];
}

const { testimonials } = Astro.props;
const firstTestimonial = testimonials[0];
---

{firstTestimonial && (
  <div class="mb-8">
    <h2 class="text-gray-900 dark:text-white text-xl font-semibold mb-8 mt-8 text-center transition-colors duration-300">What Founders Are Saying</h2>
    
    <button 
      id="testimonials-button"
      class="relative block w-full bg-gray-100 dark:bg-white/5 backdrop-blur-sm border border-gray-200 dark:border-white/10 rounded-2xl p-6 text-gray-900 dark:text-white transition-all duration-300 ease-out will-change-transform hover:will-change-auto group cursor-pointer"
      style="transform: translateZ(0);"
    >
      <div class="group-hover:scale-[1.01] transition-transform duration-300 ease-out">
        <div class="flex items-start space-x-4 mb-4">
          {firstTestimonial.image ? (
            <img
              src={firstTestimonial.image}
              alt={`${firstTestimonial.name} photo`}
              class="w-12 h-12 rounded-full object-cover border border-gray-700 flex-shrink-0"
            />
          ) : (
            <div class="w-12 h-12 bg-gradient-to-br from-gray-800 to-gray-700 rounded-full flex items-center justify-center border border-gray-700 flex-shrink-0">
              <span class="text-white text-sm font-medium">{firstTestimonial.name.charAt(0)}</span>
            </div>
          )}
          
          <div class="flex-1 text-left">
            <p class="text-gray-600 dark:text-gray-300 text-sm leading-relaxed mb-3 line-clamp-3">"{firstTestimonial.quote}"</p>
            <div>
              <p class="text-gray-900 dark:text-white font-medium text-sm">{firstTestimonial.name}</p>
              <p class="text-gray-500 dark:text-gray-400 text-xs">{firstTestimonial.role} at {firstTestimonial.company}</p>
            </div>
          </div>
        </div>
        
        <div class="flex items-center justify-center text-gray-500 dark:text-gray-400 group-hover:text-gray-700 dark:group-hover:text-gray-300 transition-colors duration-300 mt-4 pt-4 border-t border-gray-200 dark:border-white/5">
          <span class="text-xs mr-2">View all testimonials</span>
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
          </svg>
        </div>
      </div>
      
      <!-- Hover overlay for glassmorphism -->
      <div class="absolute inset-0 bg-white/0 group-hover:bg-white/5 rounded-2xl transition-all duration-300 ease-out -z-10"></div>
    </button>
  </div>
)}

<!-- Testimonials Modal -->
<div id="testimonials-modal" class="fixed inset-0 bg-black/80 dark:bg-black/80 backdrop-blur-sm z-50 hidden items-center justify-center p-4">
  <div class="relative bg-white/95 dark:bg-gray-900/95 backdrop-blur-sm border border-gray-200 dark:border-white/10 rounded-3xl max-w-lg w-full mx-auto max-h-[95vh] flex flex-col">
    <!-- Close Button -->
    <div class="absolute top-4 right-4 z-10">
      <button id="close-testimonials-modal" class="text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors duration-200">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>
    
    <!-- Testimonial Cards Stack -->
    <div class="testimonial-cards-container relative flex-1 overflow-hidden min-h-0">
      {testimonials.map((testimonial, index) => (
        <div 
          class={`testimonial-card absolute inset-0 transition-all duration-500 ease-out ${index === 0 ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-full'}`}
          data-index={index}
        >
          <div class="h-full p-4 sm:p-6 md:p-8 flex flex-col text-center">
            <!-- Profile section - vertically stacked like About Me -->
            <div class="flex-shrink-0 mb-3 sm:mb-3 lg:mb-4">
              {testimonial.image ? (
                <img
                  src={testimonial.image}
                  alt={`${testimonial.name} photo`}
                  class="w-16 h-16 sm:w-20 sm:h-20 lg:w-24 lg:h-24 rounded-full mx-auto mb-2 sm:mb-3 lg:mb-4 object-cover border-2 border-gray-700"
                />
              ) : (
                <div class="w-16 h-16 sm:w-20 sm:h-20 lg:w-24 lg:h-24 bg-gradient-to-br from-gray-800 to-gray-700 rounded-full mx-auto mb-2 sm:mb-3 lg:mb-4 flex items-center justify-center border border-gray-700">
                  <span class="text-white text-lg sm:text-xl lg:text-2xl font-light tracking-wide">{testimonial.name.charAt(0)}</span>
                </div>
              )}
              
              <h2 class="text-gray-900 dark:text-white text-base sm:text-lg lg:text-xl font-bold tracking-tight mb-1">{testimonial.name}</h2>
              <p class="text-gray-700 dark:text-gray-300 text-xs sm:text-sm lg:text-base font-medium mb-1">{testimonial.role}</p>
              <p class="text-gray-500 dark:text-gray-400 text-xs sm:text-sm lg:text-sm mb-2 sm:mb-3 lg:mb-4">{testimonial.company}</p>
            </div>
            
            <!-- Quote section with proper scrolling -->
            <div class="flex-1 min-h-0 flex flex-col">
              <blockquote class="text-gray-600 dark:text-gray-300 leading-relaxed text-sm sm:text-base italic overflow-y-auto flex-1 pr-2 text-left">
                <div class="min-h-full flex items-start">
                  <p>"{testimonial.quote}"</p>
                </div>
              </blockquote>
            </div>
          </div>
        </div>
      ))}
    </div>
    
    <!-- Navigation Controls -->
    <div class="flex items-center justify-between p-4 sm:p-6 border-t border-gray-200 dark:border-white/10 flex-shrink-0">
      <button 
        id="prev-testimonial" 
        class="flex items-center space-x-1 sm:space-x-2 text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
        disabled
      >
        <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
        </svg>
        <span class="text-xs sm:text-sm font-medium hidden sm:inline">Previous</span>
        <span class="text-xs sm:text-sm font-medium sm:hidden">Prev</span>
      </button>
      
      <!-- Counter display -->
      <div class="flex items-center space-x-1 sm:space-x-2 text-gray-500 dark:text-gray-400 text-xs sm:text-sm">
        <span id="current-counter">1</span>
        <span>/</span>
        <span id="total-counter">{testimonials.length}</span>
      </div>
      
      <button 
        id="next-testimonial" 
        class="flex items-center space-x-1 sm:space-x-2 text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
      >
        <span class="text-xs sm:text-sm font-medium hidden sm:inline">Next</span>
        <span class="text-xs sm:text-sm font-medium sm:hidden">Next</span>
        <svg class="w-4 h-4 sm:w-5 sm:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
        </svg>
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.getElementById('testimonials-button');
    const modal = document.getElementById('testimonials-modal');
    const closeButton = document.getElementById('close-testimonials-modal');
    
    const prevButton = document.getElementById('prev-testimonial');
    const nextButton = document.getElementById('next-testimonial');
    const currentCounter = document.getElementById('current-counter');
    const cards = document.querySelectorAll('.testimonial-card');
    
    let currentIndex = 0;
    const totalTestimonials = cards.length;

    function updateTestimonialDisplay() {
      // Update cards visibility
      cards.forEach((card, index) => {
        if (index === currentIndex) {
          card.classList.remove('opacity-0', 'translate-x-full', 'translate-x-[-100%]');
          card.classList.add('opacity-100', 'translate-x-0');
        } else if (index < currentIndex) {
          card.classList.remove('opacity-100', 'translate-x-0', 'translate-x-full');
          card.classList.add('opacity-0', 'translate-x-[-100%]');
        } else {
          card.classList.remove('opacity-100', 'translate-x-0', 'translate-x-[-100%]');
          card.classList.add('opacity-0', 'translate-x-full');
        }
      });


      // Update counter display
      if (currentCounter) {
        currentCounter.textContent = (currentIndex + 1).toString();
      }

      // Update button states
      if (prevButton) {
        prevButton.disabled = currentIndex === 0;
      }
      if (nextButton) {
        nextButton.disabled = currentIndex === totalTestimonials - 1;
      }
    }

    function showNext() {
      if (currentIndex < totalTestimonials - 1) {
        currentIndex++;
        updateTestimonialDisplay();
      }
    }

    function showPrev() {
      if (currentIndex > 0) {
        currentIndex--;
        updateTestimonialDisplay();
      }
    }

    function showTestimonial(index) {
      if (index >= 0 && index < totalTestimonials) {
        currentIndex = index;
        updateTestimonialDisplay();
      }
    }

    // Event listeners
    button?.addEventListener('click', () => {
      modal?.classList.remove('hidden');
      modal?.classList.add('flex');
      currentIndex = 0;
      updateTestimonialDisplay();
    });

    closeButton?.addEventListener('click', () => {
      modal?.classList.add('hidden');
      modal?.classList.remove('flex');
    });

    modal?.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.add('hidden');
        modal.classList.remove('flex');
      }
    });

    nextButton?.addEventListener('click', showNext);
    prevButton?.addEventListener('click', showPrev);

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (modal?.classList.contains('flex')) {
        if (e.key === 'ArrowRight') {
          e.preventDefault();
          showNext();
        } else if (e.key === 'ArrowLeft') {
          e.preventDefault();
          showPrev();
        } else if (e.key === 'Escape') {
          e.preventDefault();
          modal.classList.add('hidden');
          modal.classList.remove('flex');
        }
      }
    });
  });
</script>

<style>
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  /* Ensure proper scrolling behavior on mobile */
  .testimonial-card blockquote {
    -webkit-overflow-scrolling: touch;
    scrollbar-width: thin;
    scrollbar-color: rgba(156, 163, 175, 0.5) transparent;
  }
  
  /* Custom scrollbar for webkit browsers */
  .testimonial-card blockquote::-webkit-scrollbar {
    width: 4px;
  }
  
  .testimonial-card blockquote::-webkit-scrollbar-track {
    background: transparent;
  }
  
  .testimonial-card blockquote::-webkit-scrollbar-thumb {
    background: rgba(156, 163, 175, 0.5);
    border-radius: 2px;
  }
  
  .testimonial-card blockquote::-webkit-scrollbar-thumb:hover {
    background: rgba(156, 163, 175, 0.7);
  }
  
  /* Improve touch targets on mobile */
  @media (max-width: 640px) {
    #testimonials-modal button {
      min-height: 44px;
      min-width: 44px;
    }
  }
  
  /* Responsive heights for testimonial cards - focus on height not width */
  .testimonial-cards-container {
    min-height: 400px;
  }
  
  @media (min-width: 640px) {
    .testimonial-cards-container {
      min-height: 500px;
    }
  }
  
  @media (min-width: 1024px) {
    .testimonial-cards-container {
      min-height: 600px;
    }
  }
</style>